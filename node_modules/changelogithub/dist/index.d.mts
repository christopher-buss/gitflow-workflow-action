import * as changelogen from 'changelogen';
import { ChangelogConfig, GitCommit, RawGitCommit } from 'changelogen';

type ChangelogenOptions = ChangelogConfig;
interface GitHubRepo {
    owner: string;
    repo: string;
}
interface GitHubAuth {
    token: string;
    url: string;
}
interface Commit extends GitCommit {
    resolvedAuthors?: AuthorInfo[];
}
interface ChangelogOptions extends Partial<ChangelogenOptions> {
    /**
     * Dry run. Skip releasing to GitHub.
     */
    dry?: boolean;
    /**
     * Whether to include contributors in release notes.
     *
     * @default true
     */
    contributors?: boolean;
    /**
     * Name of the release
     */
    name?: string;
    /**
     * Mark the release as a draft
     */
    draft?: boolean;
    /**
     * Mark the release as prerelease
     */
    prerelease?: boolean;
    /**
     * GitHub Token
     */
    token?: string;
    /**
     * Custom titles
     */
    titles?: {
        breakingChanges?: string;
    };
    /**
     * Capitalize commit messages
     * @default true
     */
    capitalize?: boolean;
    /**
     * Nest commit messages under their scopes
     * @default true
     */
    group?: boolean | 'multiple';
    /**
     * Use emojis in section titles
     * @default true
     */
    emoji?: boolean;
    /**
     * Github base url
     * @default github.com
     */
    baseUrl?: string;
    /**
     * Github base API url
     * @default api.github.com
     */
    baseUrlApi?: string;
}
type ResolvedChangelogOptions = Required<ChangelogOptions>;
interface AuthorInfo {
    commits: string[];
    login?: string;
    email: string;
    name: string;
}

declare function sendRelease(options: ChangelogOptions, content: string): Promise<void>;
declare function resolveAuthorInfo(options: ChangelogOptions, info: AuthorInfo): Promise<AuthorInfo>;
declare function resolveAuthors(commits: Commit[], options: ChangelogOptions): Promise<AuthorInfo[]>;
declare function hasTagOnGitHub(tag: string, options: ChangelogOptions): Promise<boolean>;

declare function getGitHubRepo(baseUrl: string): Promise<string>;
declare function getCurrentGitBranch(): Promise<string>;
declare function isRepoShallow(): Promise<boolean>;
declare function getGitTags(): Promise<string[]>;
declare function getLastMatchingTag(inputTag: string): Promise<string | undefined>;
declare function isRefGitTag(to: string): Promise<false | undefined>;
declare function getFirstGitCommit(): Promise<string>;
declare function isPrerelease(version: string): boolean;

declare function generateMarkdown(commits: Commit[], options: ResolvedChangelogOptions): string;

declare function generate(options: ChangelogOptions): Promise<{
    config: Required<ChangelogOptions>;
    md: string;
    commits: changelogen.GitCommit[];
}>;

declare function defineConfig(config: ChangelogOptions): ChangelogOptions;
declare function resolveConfig(options: ChangelogOptions): Promise<Required<ChangelogOptions>>;

declare function parseCommits(commits: RawGitCommit[], config: ChangelogenOptions): GitCommit[];

export { type AuthorInfo, type ChangelogOptions, type ChangelogenOptions, type Commit, type GitHubAuth, type GitHubRepo, type ResolvedChangelogOptions, defineConfig, generate, generateMarkdown, getCurrentGitBranch, getFirstGitCommit, getGitHubRepo, getGitTags, getLastMatchingTag, hasTagOnGitHub, isPrerelease, isRefGitTag, isRepoShallow, parseCommits, resolveAuthorInfo, resolveAuthors, resolveConfig, sendRelease };
