#!/usr/bin/env node
'use strict';

const fs = require('node:fs/promises');
const process = require('node:process');
const kolorist = require('kolorist');
const cac = require('cac');
const execa = require('execa');
const index = require('./index.cjs');
require('ofetch');
require('@antfu/utils');
require('semver');
require('convert-gitmoji');
require('changelogen');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
const process__default = /*#__PURE__*/_interopDefaultCompat(process);
const cac__default = /*#__PURE__*/_interopDefaultCompat(cac);

const version = "0.13.9";

const cli = cac__default("changelogithub");
cli.version(version).option("-t, --token <path>", "GitHub Token").option("--from <ref>", "From tag").option("--to <ref>", "To tag").option("--github <path>", "GitHub Repository, e.g. antfu/changelogithub").option("--name <name>", "Name of the release").option("--contributors", "Show contributors section").option("--prerelease", "Mark release as prerelease").option("-d, --draft", "Mark release as draft").option("--output <path>", "Output to file instead of sending to GitHub").option("--capitalize", "Should capitalize for each comment message").option("--emoji", "Use emojis in section titles", { default: true }).option("--group", "Nest commit messages under their scopes").option("--dry", "Dry run").help();
async function readTokenFromGitHubCli() {
  try {
    return (await execa.execa("gh", ["auth", "token"])).stdout.trim();
  } catch {
    return "";
  }
}
cli.command("").action(async (args) => {
  args.token = args.token || process__default.env.GITHUB_TOKEN || await readTokenFromGitHubCli();
  let webUrl = "";
  try {
    let printWebUrl = function() {
      console.log();
      console.error(kolorist.yellow("Using the following link to create it manually:"));
      console.error(kolorist.yellow(webUrl));
      console.log();
    };
    console.log();
    console.log(kolorist.dim(`changelo${kolorist.bold("github")} `) + kolorist.dim(`v${version}`));
    const { config, md, commits } = await index.generate(args);
    webUrl = `https://${config.baseUrl}/${config.repo}/releases/new?title=${encodeURIComponent(String(config.name || config.to))}&body=${encodeURIComponent(String(md))}&tag=${encodeURIComponent(String(config.to))}&prerelease=${config.prerelease}`;
    console.log(kolorist.cyan(config.from) + kolorist.dim(" -> ") + kolorist.blue(config.to) + kolorist.dim(` (${commits.length} commits)`));
    console.log(kolorist.dim("--------------"));
    console.log();
    console.log(md.replace(/&nbsp;/g, ""));
    console.log();
    console.log(kolorist.dim("--------------"));
    if (config.dry) {
      console.log(kolorist.yellow("Dry run. Release skipped."));
      printWebUrl();
      return;
    }
    if (typeof config.output === "string") {
      await fs__default.writeFile(config.output, md, "utf-8");
      console.log(kolorist.yellow(`Saved to ${config.output}`));
      return;
    }
    if (!config.token) {
      console.error(kolorist.red("No GitHub token found, specify it via GITHUB_TOKEN env. Release skipped."));
      process__default.exitCode = 1;
      printWebUrl();
      return;
    }
    if (!await index.hasTagOnGitHub(config.to, config)) {
      console.error(kolorist.yellow(`Current ref "${kolorist.bold(config.to)}" is not available as tags on GitHub. Release skipped.`));
      process__default.exitCode = 1;
      printWebUrl();
      return;
    }
    if (!commits.length && await index.isRepoShallow()) {
      console.error(kolorist.yellow("The repo seems to be clone shallowly, which make changelog failed to generate. You might want to specify `fetch-depth: 0` in your CI config."));
      process__default.exitCode = 1;
      printWebUrl();
      return;
    }
    await index.sendRelease(config, md);
  } catch (e) {
    console.error(kolorist.red(String(e)));
    if (e?.stack)
      console.error(kolorist.dim(e.stack?.split("\n").slice(1).join("\n")));
    if (webUrl) {
      console.log();
      console.error(kolorist.red("Failed to create the release. Using the following link to create it manually:"));
      console.error(kolorist.yellow(webUrl));
      console.log();
    }
    process__default.exit(1);
  }
});
cli.parse();
